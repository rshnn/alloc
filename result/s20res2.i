// ROSHAN PATEL
// CS415: COMPILERS PROJECT 1
// 	 LOCAL REGISTER ALLOCATION
// Output ILOC instructions for report2.i
// Total physical register = 20
// Allocator type: s

	loadI	1020	=> r0
	loadI	1024	=> r1
	loadI	0	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	1028	=> r1
	loadI	-4	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	0	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	load	r1	=> r5
	loadI	-4	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	load	r1	=> r4
	loadI	4	=> r3
	loadI	1024	=> r7
	store	r5	=> r7
	add	r5 ,r4	=> r8
	add	r7 ,r3	=> r9
	store	r8	=> r9
	add	r8 ,r4	=> r10
	add	r9 ,r3	=> r11
	store	r10	=> r11
	add	r10 ,r4	=> r12
	add	r11 ,r3	=> r13
	store	r12	=> r13
	add	r12 ,r4	=> r14
	add	r13 ,r3	=> r15
	store	r14	=> r15
	add	r14 ,r4	=> r16
	add	r15 ,r3	=> r17
	store	r16	=> r17
	add	r16 ,r4	=> r18
	add	r17 ,r3	=> r19
	store	r18	=> r19
	add	r18 ,r4	=> r1
	loadI	-8	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	add	r19 ,r3	=> r1
	loadI	-12	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-8	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-12	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	store	r1	=> r2
	loadI	-8	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r4	=> r1
	loadI	-16	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-12	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r3	=> r1
	loadI	-20	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-16	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-20	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	store	r1	=> r2
	loadI	-16	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r4	=> r1
	loadI	-24	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-20	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r3	=> r1
	loadI	-28	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-24	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-28	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	store	r1	=> r2
	loadI	-24	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r4	=> r1
	loadI	-32	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-28	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r3	=> r1
	loadI	-36	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-32	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-36	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	store	r1	=> r2
	loadI	1024	=> r1
	loadI	-40	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-40	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	load	r1	=> r1
	loadI	-44	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-40	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r3	=> r1
	loadI	-48	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-48	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	load	r1	=> r1
	loadI	-52	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-48	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r3	=> r1
	loadI	-56	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-56	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	load	r1	=> r1
	loadI	-60	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-44	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-52	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	add	r1, r2	=> r1
	loadI	-64	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-56	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	load	r1	=> r6
	add	r6 ,r6	=> r1
	loadI	-68	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-64	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-68	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	mult	r1, r2	=> r1
	loadI	-72	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	2048	=> r1
	loadI	-76	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-72	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-76	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	store	r1	=> r2
	output	2048
