// ROSHAN PATEL
// CS415: COMPILERS PROJECT 1
// 	 LOCAL REGISTER ALLOCATION
// Output ILOC instructions for report1.i
// Total physical register = 8
// Allocator type: s

	loadI	1020	=> r0
	loadI	4000	=> r1
	loadI	0	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	4	=> r3
	loadI	1	=> r1
	loadI	-4	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	0	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	load	r1	=> r1
	loadI	-8	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	0	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r3	=> r1
	loadI	-12	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-12	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	load	r1	=> r4
	loadI	-12	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r3	=> r1
	loadI	-16	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-16	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	load	r1	=> r5
	loadI	-16	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r3	=> r1
	loadI	-20	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-20	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	load	r1	=> r6
	loadI	-20	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r3	=> r1
	loadI	-24	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-24	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	load	r1	=> r7
	loadI	-24	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r3	=> r1
	loadI	-28	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-28	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	load	r1	=> r1
	loadI	-32	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-28	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r3	=> r1
	loadI	-36	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-36	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	load	r1	=> r1
	loadI	-40	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-36	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r3	=> r1
	loadI	-44	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-44	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	load	r1	=> r1
	loadI	-48	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-44	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r3	=> r1
	loadI	-52	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-52	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	load	r1	=> r1
	loadI	-56	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-52	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r3	=> r1
	loadI	-60	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-60	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	load	r1	=> r1
	loadI	-64	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-60	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r3	=> r1
	loadI	-68	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	0	=> r1
	loadI	-72	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-8	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r4	=> r1
	loadI	-76	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-4	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	mult	r1 ,r4	=> r1
	loadI	-80	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-64	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-8	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	sub	r1, r2	=> r1
	loadI	-84	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-76	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r5	=> r1
	loadI	-88	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-80	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	mult	r1 ,r5	=> r1
	loadI	-92	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-84	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-56	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	add	r1, r2	=> r1
	loadI	-96	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-88	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r6	=> r1
	loadI	-100	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-92	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	mult	r1 ,r6	=> r1
	loadI	-104	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-96	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-48	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	sub	r1, r2	=> r1
	loadI	-108	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-100	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r7	=> r1
	loadI	-112	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-104	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	mult	r1 ,r7	=> r1
	loadI	-116	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-108	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-40	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	add	r1, r2	=> r1
	loadI	-120	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-112	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-32	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	add	r1, r2	=> r1
	loadI	-124	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-116	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-32	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	mult	r1, r2	=> r1
	loadI	-128	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-120	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-32	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	sub	r1, r2	=> r1
	loadI	-132	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-124	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-40	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	add	r1, r2	=> r1
	loadI	-136	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-128	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-40	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	mult	r1, r2	=> r1
	loadI	-140	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-120	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r7	=> r1
	loadI	-144	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	16	=> r1
	loadI	-148	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-140	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-148	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	rshift	r1, r2	=> r1
	loadI	-152	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-136	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-48	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	add	r1, r2	=> r1
	loadI	-156	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-152	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-48	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	mult	r1, r2	=> r1
	loadI	-160	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-144	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	sub	r1 ,r6	=> r1
	loadI	-164	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-156	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-56	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	add	r1, r2	=> r1
	loadI	-168	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-160	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-56	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	mult	r1, r2	=> r1
	loadI	-172	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-164	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	add	r1 ,r5	=> r1
	loadI	-176	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-168	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-64	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	add	r1, r2	=> r1
	loadI	-180	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-172	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-64	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	mult	r1, r2	=> r1
	loadI	-184	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-176	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	sub	r1 ,r4	=> r1
	loadI	-188	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	1024	=> r1
	loadI	-192	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-180	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-192	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	store	r1	=> r2
	loadI	1028	=> r1
	loadI	-196	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-184	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-196	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	store	r1	=> r2
	loadI	1032	=> r1
	loadI	-200	=> r2
	add	r0, r2	=> r2
	store	r1	=> r2
	loadI	-188	=> r1
	add	r0, r1	=> r1
	load	r1	=> r1
	loadI	-200	=> r2
	add	r0, r2	=> r2
	load	r2	=> r2
	store	r1	=> r2
	output	1024
	output	1028
	output	1032
